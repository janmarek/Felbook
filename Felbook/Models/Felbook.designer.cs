#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Felbook.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FelBookDB")]
	public partial class FelbookDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRight(Right instance);
    partial void UpdateRight(Right instance);
    partial void DeleteRight(Right instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertFriendship(Friendship instance);
    partial void UpdateFriendship(Friendship instance);
    partial void DeleteFriendship(Friendship instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertRecieverList(RecieverList instance);
    partial void UpdateRecieverList(RecieverList instance);
    partial void DeleteRecieverList(RecieverList instance);
    partial void InsertMembershipInGroup(MembershipInGroup instance);
    partial void UpdateMembershipInGroup(MembershipInGroup instance);
    partial void DeleteMembershipInGroup(MembershipInGroup instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertInfoAboutGroup(InfoAboutGroup instance);
    partial void UpdateInfoAboutGroup(InfoAboutGroup instance);
    partial void DeleteInfoAboutGroup(InfoAboutGroup instance);
    partial void InsertInformation(Information instance);
    partial void UpdateInformation(Information instance);
    partial void DeleteInformation(Information instance);
    #endregion
		
		public FelbookDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FelBookDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FelbookDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FelbookDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FelbookDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FelbookDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Right> Rights
		{
			get
			{
				return this.GetTable<Right>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Friendship> Friendships
		{
			get
			{
				return this.GetTable<Friendship>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<RecieverList> RecieverLists
		{
			get
			{
				return this.GetTable<RecieverList>();
			}
		}
		
		public System.Data.Linq.Table<MembershipInGroup> MembershipInGroups
		{
			get
			{
				return this.GetTable<MembershipInGroup>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<InfoAboutGroup> InfoAboutGroups
		{
			get
			{
				return this.GetTable<InfoAboutGroup>();
			}
		}
		
		public System.Data.Linq.Table<Information> Informations
		{
			get
			{
				return this.GetTable<Information>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rights")]
	public partial class Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoID;
		
		private int _UserID;
		
		private bool _CanRead;
		
		private bool _CanModify;
		
		private bool _CanDelete;
		
		private EntityRef<User> _User;
		
		private EntityRef<Information> _Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoIDChanging(int value);
    partial void OnInfoIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCanReadChanging(bool value);
    partial void OnCanReadChanged();
    partial void OnCanModifyChanging(bool value);
    partial void OnCanModifyChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    #endregion
		
		public Right()
		{
			this._User = default(EntityRef<User>);
			this._Information = default(EntityRef<Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InfoID
		{
			get
			{
				return this._InfoID;
			}
			set
			{
				if ((this._InfoID != value))
				{
					if (this._Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInfoIDChanging(value);
					this.SendPropertyChanging();
					this._InfoID = value;
					this.SendPropertyChanged("InfoID");
					this.OnInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanRead", DbType="Bit NOT NULL")]
		public bool CanRead
		{
			get
			{
				return this._CanRead;
			}
			set
			{
				if ((this._CanRead != value))
				{
					this.OnCanReadChanging(value);
					this.SendPropertyChanging();
					this._CanRead = value;
					this.SendPropertyChanged("CanRead");
					this.OnCanReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModify", DbType="Bit NOT NULL")]
		public bool CanModify
		{
			get
			{
				return this._CanModify;
			}
			set
			{
				if ((this._CanModify != value))
				{
					this.OnCanModifyChanging(value);
					this.SendPropertyChanging();
					this._CanModify = value;
					this.SendPropertyChanged("CanModify");
					this.OnCanModifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Right", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Rights.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Rights.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Information_Right", Storage="_Information", ThisKey="InfoID", OtherKey="InfoID", IsForeignKey=true)]
		public Information Information
		{
			get
			{
				return this._Information.Entity;
			}
			set
			{
				Information previousValue = this._Information.Entity;
				if (((previousValue != value) 
							|| (this._Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Information.Entity = null;
						previousValue.Rights.Remove(this);
					}
					this._Information.Entity = value;
					if ((value != null))
					{
						value.Rights.Add(this);
						this._InfoID = value.InfoID;
					}
					else
					{
						this._InfoID = default(int);
					}
					this.SendPropertyChanged("Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _PassHash;
		
		private EntitySet<Right> _Rights;
		
		private EntitySet<Friendship> _Friendships;
		
		private EntitySet<Friendship> _Friendships1;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<RecieverList> _RecieverLists;
		
		private EntitySet<MembershipInGroup> _Memberships;
		
		private EntitySet<Information> _Informations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPassHashChanging(string value);
    partial void OnPassHashChanged();
    #endregion
		
		public User()
		{
			this._Rights = new EntitySet<Right>(new Action<Right>(this.attach_Rights), new Action<Right>(this.detach_Rights));
			this._Friendships = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Friendships), new Action<Friendship>(this.detach_Friendships));
			this._Friendships1 = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Friendships1), new Action<Friendship>(this.detach_Friendships1));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._RecieverLists = new EntitySet<RecieverList>(new Action<RecieverList>(this.attach_RecieverLists), new Action<RecieverList>(this.detach_RecieverLists));
			this._Memberships = new EntitySet<MembershipInGroup>(new Action<MembershipInGroup>(this.attach_Memberships), new Action<MembershipInGroup>(this.detach_Memberships));
			this._Informations = new EntitySet<Information>(new Action<Information>(this.attach_Informations), new Action<Information>(this.detach_Informations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassHash", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PassHash
		{
			get
			{
				return this._PassHash;
			}
			set
			{
				if ((this._PassHash != value))
				{
					this.OnPassHashChanging(value);
					this.SendPropertyChanging();
					this._PassHash = value;
					this.SendPropertyChanged("PassHash");
					this.OnPassHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Right", Storage="_Rights", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Right> Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				this._Rights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship", Storage="_Friendships", ThisKey="UserID", OtherKey="UserWhoHas")]
		public EntitySet<Friendship> Friendships
		{
			get
			{
				return this._Friendships;
			}
			set
			{
				this._Friendships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship1", Storage="_Friendships1", ThisKey="UserID", OtherKey="WithWhichUser")]
		public EntitySet<Friendship> Friendships1
		{
			get
			{
				return this._Friendships1;
			}
			set
			{
				this._Friendships1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="UserID", OtherKey="FromUser")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecieverList", Storage="_RecieverLists", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<RecieverList> RecieverLists
		{
			get
			{
				return this._RecieverLists;
			}
			set
			{
				this._RecieverLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MembershipInGroup", Storage="_Memberships", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<MembershipInGroup> MembershipInGroups
		{
			get
			{
				return this._Memberships;
			}
			set
			{
				this._Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Information", Storage="_Informations", ThisKey="UserID", OtherKey="InfoAboutUser")]
		public EntitySet<Information> Informations
		{
			get
			{
				return this._Informations;
			}
			set
			{
				this._Informations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rights(Right entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Rights(Right entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friendships(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friendships(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friendships1(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Friendships1(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecieverLists(RecieverList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecieverLists(RecieverList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Memberships(MembershipInGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Memberships(MembershipInGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friendship")]
	public partial class Friendship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserWhoHas;
		
		private int _WithWhichUser;
		
		private string _TypeOfFriendship;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserWhoHasChanging(int value);
    partial void OnUserWhoHasChanged();
    partial void OnWithWhichUserChanging(int value);
    partial void OnWithWhichUserChanged();
    partial void OnTypeOfFriendshipChanging(string value);
    partial void OnTypeOfFriendshipChanged();
    #endregion
		
		public Friendship()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWhoHas", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserWhoHas
		{
			get
			{
				return this._UserWhoHas;
			}
			set
			{
				if ((this._UserWhoHas != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserWhoHasChanging(value);
					this.SendPropertyChanging();
					this._UserWhoHas = value;
					this.SendPropertyChanged("UserWhoHas");
					this.OnUserWhoHasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WithWhichUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WithWhichUser
		{
			get
			{
				return this._WithWhichUser;
			}
			set
			{
				if ((this._WithWhichUser != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWithWhichUserChanging(value);
					this.SendPropertyChanging();
					this._WithWhichUser = value;
					this.SendPropertyChanged("WithWhichUser");
					this.OnWithWhichUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfFriendship", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TypeOfFriendship
		{
			get
			{
				return this._TypeOfFriendship;
			}
			set
			{
				if ((this._TypeOfFriendship != value))
				{
					this.OnTypeOfFriendshipChanging(value);
					this.SendPropertyChanging();
					this._TypeOfFriendship = value;
					this.SendPropertyChanged("TypeOfFriendship");
					this.OnTypeOfFriendshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship", Storage="_User", ThisKey="UserWhoHas", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friendships.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friendships.Add(this);
						this._UserWhoHas = value.UserID;
					}
					else
					{
						this._UserWhoHas = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship1", Storage="_User1", ThisKey="WithWhichUser", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Friendships1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Friendships1.Add(this);
						this._WithWhichUser = value.UserID;
					}
					else
					{
						this._WithWhichUser = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private int _FromUser;
		
		private EntitySet<RecieverList> _RecieverLists;
		
		private EntitySet<Information> _Informations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnFromUserChanging(int value);
    partial void OnFromUserChanged();
    #endregion
		
		public Message()
		{
			this._RecieverLists = new EntitySet<RecieverList>(new Action<RecieverList>(this.attach_RecieverLists), new Action<RecieverList>(this.detach_RecieverLists));
			this._Informations = new EntitySet<Information>(new Action<Information>(this.attach_Informations), new Action<Information>(this.detach_Informations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUser", DbType="Int NOT NULL")]
		public int FromUser
		{
			get
			{
				return this._FromUser;
			}
			set
			{
				if ((this._FromUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserChanging(value);
					this.SendPropertyChanging();
					this._FromUser = value;
					this.SendPropertyChanged("FromUser");
					this.OnFromUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_RecieverList", Storage="_RecieverLists", ThisKey="MessageID", OtherKey="MessageID")]
		public EntitySet<RecieverList> RecieverLists
		{
			get
			{
				return this._RecieverLists;
			}
			set
			{
				this._RecieverLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_Information", Storage="_Informations", ThisKey="MessageID", OtherKey="InfoInMessage")]
		public EntitySet<Information> Informations
		{
			get
			{
				return this._Informations;
			}
			set
			{
				this._Informations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="FromUser", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._FromUser = value.UserID;
					}
					else
					{
						this._FromUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecieverLists(RecieverList entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_RecieverLists(RecieverList entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
		
		private void attach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecieverList")]
	public partial class RecieverList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private int _UserID;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public RecieverList()
		{
			this._Message = default(EntityRef<Message>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_RecieverList", Storage="_Message", ThisKey="MessageID", OtherKey="MessageID", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.RecieverLists.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.RecieverLists.Add(this);
						this._MessageID = value.MessageID;
					}
					else
					{
						this._MessageID = default(int);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecieverList", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecieverLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecieverLists.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Membership")]
	public partial class MembershipInGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _GroupID;
		
		private string _TypeOfMembership;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnTypeOfMembershipChanging(string value);
    partial void OnTypeOfMembershipChanged();
    #endregion
		
		public MembershipInGroup()
		{
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfMembership", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TypeOfMembership
		{
			get
			{
				return this._TypeOfMembership;
			}
			set
			{
				if ((this._TypeOfMembership != value))
				{
					this.OnTypeOfMembershipChanging(value);
					this.SendPropertyChanging();
					this._TypeOfMembership = value;
					this.SendPropertyChanged("TypeOfMembership");
					this.OnTypeOfMembershipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MembershipInGroup", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MembershipInGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MembershipInGroups.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MembershipInGroup", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.MembershipInGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.MembershipInGroups.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _Name;
		
		private System.Nullable<int> _ParentGroupID;
		
		private EntitySet<MembershipInGroup> _Memberships;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<InfoAboutGroup> _InfoAboutGroups;
		
		private EntityRef<Group> _Group1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentGroupIDChanging(System.Nullable<int> value);
    partial void OnParentGroupIDChanged();
    #endregion
		
		public Group()
		{
			this._Memberships = new EntitySet<MembershipInGroup>(new Action<MembershipInGroup>(this.attach_Memberships), new Action<MembershipInGroup>(this.detach_Memberships));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._InfoAboutGroups = new EntitySet<InfoAboutGroup>(new Action<InfoAboutGroup>(this.attach_InfoAboutGroups), new Action<InfoAboutGroup>(this.detach_InfoAboutGroups));
			this._Group1 = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentGroupID", DbType="Int")]
		public System.Nullable<int> ParentGroupID
		{
			get
			{
				return this._ParentGroupID;
			}
			set
			{
				if ((this._ParentGroupID != value))
				{
					if (this._Group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGroupID = value;
					this.SendPropertyChanged("ParentGroupID");
					this.OnParentGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MembershipInGroup", Storage="_Memberships", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<MembershipInGroup> MembershipInGroups
		{
			get
			{
				return this._Memberships;
			}
			set
			{
				this._Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Group", Storage="_Groups", ThisKey="GroupID", OtherKey="ParentGroupID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_InfoAboutGroup", Storage="_InfoAboutGroups", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<InfoAboutGroup> InfoAboutGroups
		{
			get
			{
				return this._InfoAboutGroups;
			}
			set
			{
				this._InfoAboutGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Group", Storage="_Group1", ThisKey="ParentGroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group1
		{
			get
			{
				return this._Group1.Entity;
			}
			set
			{
				Group previousValue = this._Group1.Entity;
				if (((previousValue != value) 
							|| (this._Group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group1.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Group1.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ParentGroupID = value.GroupID;
					}
					else
					{
						this._ParentGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Memberships(MembershipInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Memberships(MembershipInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = null;
		}
		
		private void attach_InfoAboutGroups(InfoAboutGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_InfoAboutGroups(InfoAboutGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfoAboutGroup")]
	public partial class InfoAboutGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoID;
		
		private int _GroupID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Information> _Information;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoIDChanging(int value);
    partial void OnInfoIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public InfoAboutGroup()
		{
			this._Group = default(EntityRef<Group>);
			this._Information = default(EntityRef<Information>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InfoID
		{
			get
			{
				return this._InfoID;
			}
			set
			{
				if ((this._InfoID != value))
				{
					if (this._Information.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInfoIDChanging(value);
					this.SendPropertyChanging();
					this._InfoID = value;
					this.SendPropertyChanged("InfoID");
					this.OnInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_InfoAboutGroup", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.InfoAboutGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.InfoAboutGroups.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Information_InfoAboutGroup", Storage="_Information", ThisKey="InfoID", OtherKey="InfoID", IsForeignKey=true)]
		public Information Information
		{
			get
			{
				return this._Information.Entity;
			}
			set
			{
				Information previousValue = this._Information.Entity;
				if (((previousValue != value) 
							|| (this._Information.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Information.Entity = null;
						previousValue.InfoAboutGroups.Remove(this);
					}
					this._Information.Entity = value;
					if ((value != null))
					{
						value.InfoAboutGroups.Add(this);
						this._InfoID = value.InfoID;
					}
					else
					{
						this._InfoID = default(int);
					}
					this.SendPropertyChanged("Information");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Information")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Structured", Type=typeof(StructuredInformation), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Simple", Type=typeof(SimpleInformation))]
	public abstract partial class Information : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoID;
		
		private System.Nullable<int> _ParentInfoID;
		
		private string _Description;
		
		private System.Nullable<int> _InfoAboutUser;
		
		private System.Nullable<int> _InfoInMessage;
		
		private string _TypeOfInfo;
		
		private string _Content;
		
		private EntitySet<Right> _Rights;
		
		private EntitySet<InfoAboutGroup> _InfoAboutGroups;
		
		private EntitySet<Information> _Informations;
		
		private EntityRef<Information> _Information1;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoIDChanging(int value);
    partial void OnInfoIDChanged();
    partial void OnParentInfoIDChanging(System.Nullable<int> value);
    partial void OnParentInfoIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnInfoAboutUserChanging(System.Nullable<int> value);
    partial void OnInfoAboutUserChanged();
    partial void OnInfoInMessageChanging(System.Nullable<int> value);
    partial void OnInfoInMessageChanged();
    partial void OnTypeOfInfoChanging(string value);
    partial void OnTypeOfInfoChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Information()
		{
			this._Rights = new EntitySet<Right>(new Action<Right>(this.attach_Rights), new Action<Right>(this.detach_Rights));
			this._InfoAboutGroups = new EntitySet<InfoAboutGroup>(new Action<InfoAboutGroup>(this.attach_InfoAboutGroups), new Action<InfoAboutGroup>(this.detach_InfoAboutGroups));
			this._Informations = new EntitySet<Information>(new Action<Information>(this.attach_Informations), new Action<Information>(this.detach_Informations));
			this._Information1 = default(EntityRef<Information>);
			this._Message = default(EntityRef<Message>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InfoID
		{
			get
			{
				return this._InfoID;
			}
			set
			{
				if ((this._InfoID != value))
				{
					this.OnInfoIDChanging(value);
					this.SendPropertyChanging();
					this._InfoID = value;
					this.SendPropertyChanged("InfoID");
					this.OnInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentInfoID", DbType="Int")]
		public System.Nullable<int> ParentInfoID
		{
			get
			{
				return this._ParentInfoID;
			}
			set
			{
				if ((this._ParentInfoID != value))
				{
					if (this._Information1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentInfoIDChanging(value);
					this.SendPropertyChanging();
					this._ParentInfoID = value;
					this.SendPropertyChanged("ParentInfoID");
					this.OnParentInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoAboutUser", DbType="Int")]
		public System.Nullable<int> InfoAboutUser
		{
			get
			{
				return this._InfoAboutUser;
			}
			set
			{
				if ((this._InfoAboutUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInfoAboutUserChanging(value);
					this.SendPropertyChanging();
					this._InfoAboutUser = value;
					this.SendPropertyChanged("InfoAboutUser");
					this.OnInfoAboutUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoInMessage", DbType="Int")]
		public System.Nullable<int> InfoInMessage
		{
			get
			{
				return this._InfoInMessage;
			}
			set
			{
				if ((this._InfoInMessage != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInfoInMessageChanging(value);
					this.SendPropertyChanging();
					this._InfoInMessage = value;
					this.SendPropertyChanged("InfoInMessage");
					this.OnInfoInMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfInfo", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never, IsDiscriminator=true)]
		public string TypeOfInfo
		{
			get
			{
				return this._TypeOfInfo;
			}
			set
			{
				if ((this._TypeOfInfo != value))
				{
					this.OnTypeOfInfoChanging(value);
					this.SendPropertyChanging();
					this._TypeOfInfo = value;
					this.SendPropertyChanged("TypeOfInfo");
					this.OnTypeOfInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Information_Right", Storage="_Rights", ThisKey="InfoID", OtherKey="InfoID")]
		public EntitySet<Right> Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				this._Rights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Information_InfoAboutGroup", Storage="_InfoAboutGroups", ThisKey="InfoID", OtherKey="InfoID")]
		public EntitySet<InfoAboutGroup> InfoAboutGroups
		{
			get
			{
				return this._InfoAboutGroups;
			}
			set
			{
				this._InfoAboutGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Information_Information", Storage="_Informations", ThisKey="InfoID", OtherKey="ParentInfoID")]
		public EntitySet<Information> Informations
		{
			get
			{
				return this._Informations;
			}
			set
			{
				this._Informations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Information_Information", Storage="_Information1", ThisKey="ParentInfoID", OtherKey="InfoID", IsForeignKey=true)]
		public Information Information1
		{
			get
			{
				return this._Information1.Entity;
			}
			set
			{
				Information previousValue = this._Information1.Entity;
				if (((previousValue != value) 
							|| (this._Information1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Information1.Entity = null;
						previousValue.Informations.Remove(this);
					}
					this._Information1.Entity = value;
					if ((value != null))
					{
						value.Informations.Add(this);
						this._ParentInfoID = value.InfoID;
					}
					else
					{
						this._ParentInfoID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Information1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_Information", Storage="_Message", ThisKey="InfoInMessage", OtherKey="MessageID", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.Informations.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.Informations.Add(this);
						this._InfoInMessage = value.MessageID;
					}
					else
					{
						this._InfoInMessage = default(Nullable<int>);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Information", Storage="_User", ThisKey="InfoAboutUser", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Informations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Informations.Add(this);
						this._InfoAboutUser = value.UserID;
					}
					else
					{
						this._InfoAboutUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rights(Right entity)
		{
			this.SendPropertyChanging();
			entity.Information = this;
		}
		
		private void detach_Rights(Right entity)
		{
			this.SendPropertyChanging();
			entity.Information = null;
		}
		
		private void attach_InfoAboutGroups(InfoAboutGroup entity)
		{
			this.SendPropertyChanging();
			entity.Information = this;
		}
		
		private void detach_InfoAboutGroups(InfoAboutGroup entity)
		{
			this.SendPropertyChanging();
			entity.Information = null;
		}
		
		private void attach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.Information1 = this;
		}
		
		private void detach_Informations(Information entity)
		{
			this.SendPropertyChanging();
			entity.Information1 = null;
		}
	}
	
	public partial class StructuredInformation : Information
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public StructuredInformation()
		{
			OnCreated();
		}
	}
	
	public partial class SimpleInformation : Information
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public SimpleInformation()
		{
			OnCreated();
		}
	}
}
#pragma warning restore 1591
